[ { "title": "AWS", "url": "/posts/AWS/", "categories": "AWS, AWSWebPage", "tags": "", "date": "2023-01-15 17:00:00 +0000", "snippet": "Setting up and Deploying a Web Page on Amazon Web Services (AWS)Amazon Web Services (AWS) is a collection of remote computing services (also called web services) that make up a cloud computing plat...", "content": "Setting up and Deploying a Web Page on Amazon Web Services (AWS)Amazon Web Services (AWS) is a collection of remote computing services (also called web services) that make up a cloud computing platform, provided by Amazon.com. In this article, we will show you how to set up and deploy a simple web page on AWS.PrerequisitesBefore getting started, you’ll need the following: An AWS account. If you don’t have one, you can sign up for a free account here. A basic knowledge of HTML, CSS, and JavaScript.Step 1: Setting up an S3 BucketTo deploy a web page on AWS, you’ll need to set up an Amazon Simple Storage Service (S3) bucket. S3 is an object storage service that offers industry-leading scalability, data availability, security, and performance. Log in to the AWS Management Console. Click the “Services” drop-down menu and select “S3.” Click the “Create bucket” button. Give your bucket a unique name and select the region closest to your target audience. Choose the “Standard” storage class and click the “Next” button. In the “Set properties” section, leave the default settings and click the “Next” button. In the “Set permissions” section, select the “Block all public access” option and click the “Next” button. Review your settings and click the “Create bucket” button to create the S3 bucket.Step 2: Creating Your Web PageNow that you have an S3 bucket set up, you need to create your web page. In the AWS Management Console, navigate to the S3 bucket you just created. Click the “Upload” button to upload a new file to the bucket. Create a new file called “index.html” with the following code:&lt;html&gt; &lt;head&gt; &lt;title&gt;My First AWS Web Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello, AWS!&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; Upload the file to your S3 bucket.Step 3: Deploying Your Web PageNow that your web page is created, you need to deploy it to your S3 bucket. In the AWS Management Console, navigate to the S3 bucket you created. Right-click on the “index.html” file and select “Properties.” In the “Properties” section, click on the “Static website hosting” card. Select the “Use this bucket to host a website” option. Enter “index.html” as the index document and click the “Save” button. Take note of the “Endpoint” URL displayed on the card, which is the URL for your web page.Step 4: Making Your Web Page PublicBy default, the contents of your S3 bucket are private. To make your web page publicly accessible, you need to set the appropriate permissions. In the AWS Management Console, navigate to the S3 bucket you created. Right-click on the “index.html In the “Permissions” section, click on the “Bucket Policy” tab. Add the following bucket policy to make your web page publicly accessible:{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"PublicReadGetObject\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::&lt;your_bucket_name&gt;/*\" } ]}Replace with the name of your S3 bucket. Click the “Save” button to save the bucket policy.Step 5: Testing Your Web PageNow that your web page is deployed and publicly accessible, it’s time to test it. Open a web browser and navigate to the “Endpoint” URL you noted in Step 3. You should see your web page with the message “Hello, AWS!” displayed.ConclusionCongratulations! You have successfully set up and deployed a web page on AWS. This is just the beginning of what you can do with AWS. AWS provides a variety of services and tools to help you build and deploy complex applications and services. With this simple example, you now have a foundation for building more complex web applications with AWS." }, { "title": "Azure", "url": "/posts/Azure/", "categories": "Azure, AzureWebPage", "tags": "", "date": "2022-06-27 17:00:00 +0000", "snippet": "Setting up and Deploying a Web Page with AzureMicrosoft Azure is a cloud computing platform and infrastructure created by Microsoft for building, deploying, and managing applications and services t...", "content": "Setting up and Deploying a Web Page with AzureMicrosoft Azure is a cloud computing platform and infrastructure created by Microsoft for building, deploying, and managing applications and services through a global network of Microsoft-managed data centers. In this article, we will be showing you how to set up and deploy a simple web page on Azure.PrerequisitesBefore getting started, you’ll need the following: A Microsoft Azure account. If you don’t have one, you can sign up for a free account here. A basic knowledge of HTML, CSS, and JavaScript.Step 1: Creating an Azure Web App**To deploy a web page on Azure, you’ll need to create an Azure Web App. An Azure Web App is a platform for building, deploying, and scaling web applications on Azure. Log in to the Azure portal. Click the “Create a resource” button on the left-hand side of the screen. Search for “Web App” and select it from the results. Click the “Create” button to create a new Web App. Fill in the necessary information, such as the app name, resource group, and runtime stack. You can also choose a free pricing tier to keep costs low while testing. Click the “Review + create” button to review your settings, and then click the “Create” button to create the Web App. Wait for the deployment to complete, which should take a few minutes.Step 2: Creating Your Web PageNow that you have an Azure Web App set up, you need to create your web page. In the Azure portal, navigate to the Web App you just created. Click on the “Development Tools” section, and then click on “Visual Studio Code.” In Visual Studio Code, create a new file called “index.html.” Add the following code to the file:&lt;html&gt; &lt;head&gt; &lt;title&gt;My First Azure Web Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello, Azure!&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt;Step 3: Deploying Your Web PageNow that your web page is created, you need to deploy it to your Azure Web App. In Visual Studio Code, click on the “Explorer” icon on the left-hand side of the screen. Right-click on the “index.html” file and select “Copy Path.” In the Azure portal, navigate to the Web App you created. Click on the “Development Tools” section, and then click on “Advanced Tools.” Click on the “Go” button to launch the Kudu service. In the Kudu service, click on the “Debug console” drop-down menu and select “CMD.” In the CMD console, navigate to the “site” folder. Type the following command and press enter: echo “” &gt; index.html Type the following command and press enter: notepad index.html Paste the path to your “index.html” file into Notepad and save the file. Navigate to your Web App’s URL, which should be in the format of https://.azurewebsites.net. You should see your web page with the message “Hello, Azure!” displayed.ConclusionCongratulations! You have successfully set up and deployed a web page on Azure. This is just the beginning of what you can do with Azure. Azure provides a variety of services and tools to help you build and deploy complex applications and services. With this simple example, you now have a foundation for building more complex web applications with Azure." } ]
